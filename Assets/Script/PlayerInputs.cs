//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""RythmAction"",
            ""id"": ""08734e2b-a065-4a09-b133-2a29608ed484"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ffb424ad-b307-4435-92c1-0f9b328758fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""PassThrough"",
                    ""id"": ""78628f98-7140-4dac-b4a1-6ea10f0833e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c48ba0fa-d92e-4dbd-b1cf-470af205c216"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b869910-837a-4cff-9b35-9106f54964ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db5e239b-26d8-4c54-ada1-a33636b8aa49"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e986133a-d8f1-4461-aee6-844174edbfa4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c02c6f-f2cf-4719-9f5e-ddb8a6276bf4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45f64843-58f9-472f-af62-0029588c3798"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ItemAction"",
            ""id"": ""70f21fc8-a578-4894-9918-dff5e4914cf3"",
            ""actions"": [
                {
                    ""name"": ""One"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8d90025a-c0e0-43c2-97a8-0a8ccbdd9b12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Two"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9b06f0d4-23cd-4b7d-b5b8-5dbf7ee65a5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Three"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aa760d9b-2622-495d-a8af-ea237b6eb60f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Four"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d801f182-9d4f-4fd6-b461-f4a2e01096ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Five"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d05bb55e-56dd-47b6-95f8-71792d290fae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Six"",
                    ""type"": ""PassThrough"",
                    ""id"": ""52fd4251-b209-4d55-9d7d-bdf3ca64ab49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""205fbd58-234d-47b7-aa3c-c6b1588ba157"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""One"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f99cadfb-1314-4606-9ad7-97aa13bd63ab"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Two"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb93a2d4-a1fa-4c73-9944-3652b1a7549c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Three"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5688c262-0f87-4ecb-bda3-8b627528925e"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Four"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f3c1ba0-8eed-4767-9c61-f72e5c3aa6ce"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Five"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb4ca136-db93-4e0c-a2a3-d06eca14cdde"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Six"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RythmAction
        m_RythmAction = asset.FindActionMap("RythmAction", throwIfNotFound: true);
        m_RythmAction_Right = m_RythmAction.FindAction("Right", throwIfNotFound: true);
        m_RythmAction_Left = m_RythmAction.FindAction("Left", throwIfNotFound: true);
        m_RythmAction_Up = m_RythmAction.FindAction("Up", throwIfNotFound: true);
        m_RythmAction_Down = m_RythmAction.FindAction("Down", throwIfNotFound: true);
        // ItemAction
        m_ItemAction = asset.FindActionMap("ItemAction", throwIfNotFound: true);
        m_ItemAction_One = m_ItemAction.FindAction("One", throwIfNotFound: true);
        m_ItemAction_Two = m_ItemAction.FindAction("Two", throwIfNotFound: true);
        m_ItemAction_Three = m_ItemAction.FindAction("Three", throwIfNotFound: true);
        m_ItemAction_Four = m_ItemAction.FindAction("Four", throwIfNotFound: true);
        m_ItemAction_Five = m_ItemAction.FindAction("Five", throwIfNotFound: true);
        m_ItemAction_Six = m_ItemAction.FindAction("Six", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RythmAction
    private readonly InputActionMap m_RythmAction;
    private List<IRythmActionActions> m_RythmActionActionsCallbackInterfaces = new List<IRythmActionActions>();
    private readonly InputAction m_RythmAction_Right;
    private readonly InputAction m_RythmAction_Left;
    private readonly InputAction m_RythmAction_Up;
    private readonly InputAction m_RythmAction_Down;
    public struct RythmActionActions
    {
        private @PlayerInputs m_Wrapper;
        public RythmActionActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_RythmAction_Right;
        public InputAction @Left => m_Wrapper.m_RythmAction_Left;
        public InputAction @Up => m_Wrapper.m_RythmAction_Up;
        public InputAction @Down => m_Wrapper.m_RythmAction_Down;
        public InputActionMap Get() { return m_Wrapper.m_RythmAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RythmActionActions set) { return set.Get(); }
        public void AddCallbacks(IRythmActionActions instance)
        {
            if (instance == null || m_Wrapper.m_RythmActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RythmActionActionsCallbackInterfaces.Add(instance);
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IRythmActionActions instance)
        {
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IRythmActionActions instance)
        {
            if (m_Wrapper.m_RythmActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRythmActionActions instance)
        {
            foreach (var item in m_Wrapper.m_RythmActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RythmActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RythmActionActions @RythmAction => new RythmActionActions(this);

    // ItemAction
    private readonly InputActionMap m_ItemAction;
    private List<IItemActionActions> m_ItemActionActionsCallbackInterfaces = new List<IItemActionActions>();
    private readonly InputAction m_ItemAction_One;
    private readonly InputAction m_ItemAction_Two;
    private readonly InputAction m_ItemAction_Three;
    private readonly InputAction m_ItemAction_Four;
    private readonly InputAction m_ItemAction_Five;
    private readonly InputAction m_ItemAction_Six;
    public struct ItemActionActions
    {
        private @PlayerInputs m_Wrapper;
        public ItemActionActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @One => m_Wrapper.m_ItemAction_One;
        public InputAction @Two => m_Wrapper.m_ItemAction_Two;
        public InputAction @Three => m_Wrapper.m_ItemAction_Three;
        public InputAction @Four => m_Wrapper.m_ItemAction_Four;
        public InputAction @Five => m_Wrapper.m_ItemAction_Five;
        public InputAction @Six => m_Wrapper.m_ItemAction_Six;
        public InputActionMap Get() { return m_Wrapper.m_ItemAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ItemActionActions set) { return set.Get(); }
        public void AddCallbacks(IItemActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ItemActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ItemActionActionsCallbackInterfaces.Add(instance);
            @One.started += instance.OnOne;
            @One.performed += instance.OnOne;
            @One.canceled += instance.OnOne;
            @Two.started += instance.OnTwo;
            @Two.performed += instance.OnTwo;
            @Two.canceled += instance.OnTwo;
            @Three.started += instance.OnThree;
            @Three.performed += instance.OnThree;
            @Three.canceled += instance.OnThree;
            @Four.started += instance.OnFour;
            @Four.performed += instance.OnFour;
            @Four.canceled += instance.OnFour;
            @Five.started += instance.OnFive;
            @Five.performed += instance.OnFive;
            @Five.canceled += instance.OnFive;
            @Six.started += instance.OnSix;
            @Six.performed += instance.OnSix;
            @Six.canceled += instance.OnSix;
        }

        private void UnregisterCallbacks(IItemActionActions instance)
        {
            @One.started -= instance.OnOne;
            @One.performed -= instance.OnOne;
            @One.canceled -= instance.OnOne;
            @Two.started -= instance.OnTwo;
            @Two.performed -= instance.OnTwo;
            @Two.canceled -= instance.OnTwo;
            @Three.started -= instance.OnThree;
            @Three.performed -= instance.OnThree;
            @Three.canceled -= instance.OnThree;
            @Four.started -= instance.OnFour;
            @Four.performed -= instance.OnFour;
            @Four.canceled -= instance.OnFour;
            @Five.started -= instance.OnFive;
            @Five.performed -= instance.OnFive;
            @Five.canceled -= instance.OnFive;
            @Six.started -= instance.OnSix;
            @Six.performed -= instance.OnSix;
            @Six.canceled -= instance.OnSix;
        }

        public void RemoveCallbacks(IItemActionActions instance)
        {
            if (m_Wrapper.m_ItemActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IItemActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ItemActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ItemActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ItemActionActions @ItemAction => new ItemActionActions(this);
    public interface IRythmActionActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IItemActionActions
    {
        void OnOne(InputAction.CallbackContext context);
        void OnTwo(InputAction.CallbackContext context);
        void OnThree(InputAction.CallbackContext context);
        void OnFour(InputAction.CallbackContext context);
        void OnFive(InputAction.CallbackContext context);
        void OnSix(InputAction.CallbackContext context);
    }
}
